#!/usr/bin/env python
"""
Test script to verify LLM-based attribute generation in MemoryNote creation.
This addresses Issue #10 about implementing LLM-based note attribute generation.
"""

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

# Mock the dependencies that are not available
class MockLLMController:
    class MockLLM:
        def get_completion(self, prompt, response_format=None):
            # Simulate LLM response with extracted attributes
            return '''{
                "keywords": ["machine learning", "neural networks", "deep learning"],
                "context": "Discussion about machine learning techniques and neural network architectures for AI development.",
                "tags": ["AI", "machine learning", "technology", "research"]
            }'''
    
    def __init__(self, backend, model, api_key):
        self.llm = self.MockLLM()

class MockChromaRetriever:
    def __init__(self, collection_name, model_name):
        self.collection_name = collection_name
        self.model_name = model_name
        self.documents = {}
        
    def add_document(self, content, metadata, doc_id):
        self.documents[doc_id] = {"content": content, "metadata": metadata}
        
    def search(self, query, k):
        return {'ids': [[]], 'metadatas': [[]], 'distances': [[]]}
        
    def delete_document(self, doc_id):
        if doc_id in self.documents:
            del self.documents[doc_id]
            
    @property
    def client(self):
        class MockClient:
            def reset(self):
                pass
        return MockClient()

# Patch the imports
import agentic_memory.llm_controller
import agentic_memory.retrievers
agentic_memory.llm_controller.LLMController = MockLLMController
agentic_memory.retrievers.ChromaRetriever = MockChromaRetriever

# Now import the actual classes
from agentic_memory.memory_system import AgenticMemorySystem, MemoryNote

def test_llm_attribute_generation():
    """Test that LLM automatically generates attributes for memory notes."""
    print("Testing LLM-based attribute generation...")
    
    # Create mock LLM controller
    llm_controller = MockLLMController("openai", "gpt-4o-mini", None)
    
    # Test 1: Create MemoryNote with LLM controller - should generate attributes
    print("\n1. Testing MemoryNote with LLM controller...")
    content = "Machine learning is a subset of artificial intelligence that uses neural networks."
    note = MemoryNote(content=content, llm_controller=llm_controller)
    
    print(f"Content: {note.content}")
    print(f"Keywords: {note.keywords}")
    print(f"Context: {note.context}")
    print(f"Tags: {note.tags}")
    
    # Verify that attributes were generated
    assert len(note.keywords) > 0, "Keywords should be generated by LLM"
    assert note.context != "General", "Context should be generated by LLM"
    assert len(note.tags) > 0, "Tags should be generated by LLM"
    
    # Test 2: Create MemoryNote without LLM controller - should use defaults
    print("\n2. Testing MemoryNote without LLM controller...")
    note_no_llm = MemoryNote(content=content)
    
    print(f"Content: {note_no_llm.content}")
    print(f"Keywords: {note_no_llm.keywords}")
    print(f"Context: {note_no_llm.context}")
    print(f"Tags: {note_no_llm.tags}")
    
    # Verify that defaults were used
    assert note_no_llm.keywords == [], "Keywords should be empty without LLM"
    assert note_no_llm.context == "General", "Context should be default without LLM"
    assert note_no_llm.tags == [], "Tags should be empty without LLM"
    
    # Test 3: Create MemoryNote with some attributes provided - should only generate missing ones
    print("\n3. Testing MemoryNote with partial attributes...")
    note_partial = MemoryNote(
        content=content, 
        keywords=["provided", "keyword"],
        llm_controller=llm_controller
    )
    
    print(f"Content: {note_partial.content}")
    print(f"Keywords: {note_partial.keywords}")
    print(f"Context: {note_partial.context}")
    print(f"Tags: {note_partial.tags}")
    
    # Verify that provided attributes were kept and missing ones were generated
    assert note_partial.keywords == ["provided", "keyword"], "Provided keywords should be kept"
    assert note_partial.context != "General", "Context should be generated by LLM"
    assert len(note_partial.tags) > 0, "Tags should be generated by LLM"
    
    print("\n✓ All LLM attribute generation tests passed!")
    return True

def test_memory_system_integration():
    """Test that AgenticMemorySystem integrates with LLM attribute generation."""
    print("\nTesting AgenticMemorySystem integration...")
    
    # Create memory system
    memory_system = AgenticMemorySystem()
    
    # Add a note - should automatically generate attributes
    content = "Python is a programming language used for data science and machine learning."
    memory_id = memory_system.add_note(content)
    
    # Retrieve the note
    note = memory_system.read(memory_id)
    
    print(f"Retrieved note:")
    print(f"  Content: {note.content}")
    print(f"  Keywords: {note.keywords}")
    print(f"  Context: {note.context}")
    print(f"  Tags: {note.tags}")
    
    # Verify that attributes were generated
    assert len(note.keywords) > 0, "Keywords should be generated automatically"
    assert note.context != "General", "Context should be generated automatically"
    assert len(note.tags) > 0, "Tags should be generated automatically"
    
    print("\n✓ AgenticMemorySystem integration test passed!")
    return True

if __name__ == "__main__":
    success = True
    
    try:
        success &= test_llm_attribute_generation()
        success &= test_memory_system_integration()
        
        if success:
            print("\n✅ All tests passed! LLM-based attribute generation is working correctly.")
            print("Issue #10 has been resolved - LLM now automatically generates keywords, tags, and context.")
        else:
            print("\n❌ Some tests failed!")
            
    except Exception as e:
        print(f"\n❌ Error during testing: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    sys.exit(0 if success else 1)